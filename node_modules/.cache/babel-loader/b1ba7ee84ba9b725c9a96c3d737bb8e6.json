{"ast":null,"code":"var _jsxFileName = \"/home/turgor/Pulpit/GetGood/src/components/TakeQuiz.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../scss/_Main.scss\";\nimport TakeQuizQuestion from \"./TakeQuizQuestion\";\nimport TakeQuizButtons from \"./TakeQuizButtons\";\nimport TakeQuizCount from \"./TakeQuizCount\";\nimport TakeQuizSummary from \"./TakeQuizSummary\";\n\nfunction TakeQuiz({\n  quizID,\n  correctCounterHandler,\n  setCorrectCounter,\n  correctCounter,\n  quizQuestions\n}) {\n  // const [quizQuestions, setQuizQuestions] = useState();\n  const [questionNumber, setQuestionNumber] = useState(0);\n  useEffect(() => {// fetchAllQuizes();\n    // console.log(\"fetch\", quizQuestions);\n  }, []);\n\n  const clickHandler = e => {\n    correctCounterHandler(e);\n\n    if (quizQuestions.questions.length > questionNumber) {\n      setQuestionNumber(prev => prev + 1);\n    } else {\n      return;\n    }\n  };\n\n  const startOver = () => {\n    setQuestionNumber(0);\n    setCorrectCounter(0); // setQuizQuestions((prev) => shuffle(prev));\n  };\n\n  function shuffle(array) {\n    var m = array.length,\n        t,\n        i; // While there remain elements to shuffle…\n\n    while (m) {\n      // Pick a remaining element…\n      i = Math.floor(Math.random() * m--); // And swap it with the current element.\n\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  const shuffleQuestions = obj => {\n    // shuffle(obj.questions)\n    obj.questions.forEach(arr => shuffle(arr[0].answers));\n  }; // const fetchAllQuizes = () => {\n  //   fetch(\"http://localhost:4000/quizs\")\n  //     .then((resp) => resp.json())\n  //     .then((data) =>\n  //       data.forEach((e) => {\n  //         if (e.id === quizID) {\n  //           setQuizQuestions(e);\n  //         }\n  //       })\n  //     );\n  // };\n  // console.log(quizQuestions)\n\n\n  if (quizQuestions) {\n    shuffleQuestions(quizQuestions);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"takeQuizContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, quizQuestions && questionNumber === quizQuestions.questions.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TakeQuizButtons, {\n    startOver: startOver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TakeQuizSummary, {\n    correctCounter: correctCounter,\n    quizQuestions: quizQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TakeQuizButtons, {\n    startOver: startOver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TakeQuizQuestion, {\n    questionNumber: questionNumber,\n    clickHandler: clickHandler,\n    quizQuestions: quizQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TakeQuizCount, {\n    questionNumber: questionNumber,\n    quizQuestions: quizQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default TakeQuiz;","map":{"version":3,"sources":["/home/turgor/Pulpit/GetGood/src/components/TakeQuiz.jsx"],"names":["React","useState","useEffect","TakeQuizQuestion","TakeQuizButtons","TakeQuizCount","TakeQuizSummary","TakeQuiz","quizID","correctCounterHandler","setCorrectCounter","correctCounter","quizQuestions","questionNumber","setQuestionNumber","clickHandler","e","questions","length","prev","startOver","shuffle","array","m","t","i","Math","floor","random","shuffleQuestions","obj","forEach","arr","answers"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,oBAAP;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,SAASC,QAAT,CAAkB;AAChBC,EAAAA,MADgB;AAEhBC,EAAAA,qBAFgB;AAGhBC,EAAAA,iBAHgB;AAIhBC,EAAAA,cAJgB;AAKhBC,EAAAA;AALgB,CAAlB,EAMG;AACD;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,CAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM,CACd;AACA;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMa,YAAY,GAAIC,CAAD,IAAO;AAC1BP,IAAAA,qBAAqB,CAACO,CAAD,CAArB;;AACA,QAAIJ,aAAa,CAACK,SAAd,CAAwBC,MAAxB,GAAiCL,cAArC,EAAqD;AACnDC,MAAAA,iBAAiB,CAAEK,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAjB;AACD,KAFD,MAEO;AACL;AACD;AACF,GAPD;;AAQA,QAAMC,SAAS,GAAG,MAAM;AACtBN,IAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACAJ,IAAAA,iBAAiB,CAAC,CAAD,CAAjB,CAFsB,CAGtB;AACD,GAJD;;AAMA,WAASW,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAIC,CAAC,GAAGD,KAAK,CAACJ,MAAd;AAAA,QACEM,CADF;AAAA,QAEEC,CAFF,CADsB,CAKtB;;AACA,WAAOF,CAAP,EAAU;AACR;AACAE,MAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,CAAC,EAA5B,CAAJ,CAFQ,CAIR;;AACAC,MAAAA,CAAC,GAAGF,KAAK,CAACC,CAAD,CAAT;AACAD,MAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACG,CAAD,CAAhB;AACAH,MAAAA,KAAK,CAACG,CAAD,CAAL,GAAWD,CAAX;AACD;;AAED,WAAOF,KAAP;AACD;;AAED,QAAMO,gBAAgB,GAAIC,GAAD,IAAS;AAChC;AACAA,IAAAA,GAAG,CAACb,SAAJ,CAAcc,OAAd,CAAuBC,GAAD,IAASX,OAAO,CAACW,GAAG,CAAC,CAAD,CAAH,CAAOC,OAAR,CAAtC;AACD,GAHD,CA1CC,CA+CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIrB,aAAJ,EAAmB;AACjBiB,IAAAA,gBAAgB,CAACjB,aAAD,CAAhB;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGA,aAAa,IAAIC,cAAc,KAAKD,aAAa,CAACK,SAAd,CAAwBC,MAA5D,gBACC,uDACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEE,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,eAAD;AACE,IAAA,cAAc,EAAET,cADlB;AAEE,IAAA,aAAa,EAAEC,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADD,gBASC,uDACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEQ,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,gBAAD;AACE,IAAA,cAAc,EAAEP,cADlB;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,aAAa,EAAEH,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAOE,oBAAC,aAAD;AACE,IAAA,cAAc,EAAEC,cADlB;AAEE,IAAA,aAAa,EAAED,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CAXJ,CADF;AA2BD;;AAED,eAAeL,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../scss/_Main.scss\";\nimport TakeQuizQuestion from \"./TakeQuizQuestion\";\nimport TakeQuizButtons from \"./TakeQuizButtons\";\nimport TakeQuizCount from \"./TakeQuizCount\";\nimport TakeQuizSummary from \"./TakeQuizSummary\";\n\nfunction TakeQuiz({\n  quizID,\n  correctCounterHandler,\n  setCorrectCounter,\n  correctCounter,\n  quizQuestions\n}) {\n  // const [quizQuestions, setQuizQuestions] = useState();\n  const [questionNumber, setQuestionNumber] = useState(0);\n\n  useEffect(() => {\n    // fetchAllQuizes();\n    // console.log(\"fetch\", quizQuestions);\n  }, []);\n\n  const clickHandler = (e) => {\n    correctCounterHandler(e);\n    if (quizQuestions.questions.length > questionNumber) {\n      setQuestionNumber((prev) => prev + 1);\n    } else {\n      return;\n    }\n  };\n  const startOver = () => {\n    setQuestionNumber(0);\n    setCorrectCounter(0);\n    // setQuizQuestions((prev) => shuffle(prev));\n  };\n\n  function shuffle(array) {\n    var m = array.length,\n      t,\n      i;\n\n    // While there remain elements to shuffle…\n    while (m) {\n      // Pick a remaining element…\n      i = Math.floor(Math.random() * m--);\n\n      // And swap it with the current element.\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  const shuffleQuestions = (obj) => {\n    // shuffle(obj.questions)\n    obj.questions.forEach((arr) => shuffle(arr[0].answers));\n  };\n\n  // const fetchAllQuizes = () => {\n  //   fetch(\"http://localhost:4000/quizs\")\n  //     .then((resp) => resp.json())\n  //     .then((data) =>\n  //       data.forEach((e) => {\n  //         if (e.id === quizID) {\n  //           setQuizQuestions(e);\n  //         }\n  //       })\n  //     );\n  // };\n  // console.log(quizQuestions)\n  if (quizQuestions) {\n    shuffleQuestions(quizQuestions);\n  }\n  return (\n    <div className=\"takeQuizContent\">\n      {/* {console.log(quizQuestions)} */}\n      {quizQuestions && questionNumber === quizQuestions.questions.length ? (\n        <>\n          <TakeQuizButtons startOver={startOver} />\n          <TakeQuizSummary\n            correctCounter={correctCounter}\n            quizQuestions={quizQuestions}\n          />\n        </>\n      ) : (\n        <>\n          <TakeQuizButtons startOver={startOver} />\n          <TakeQuizQuestion\n            questionNumber={questionNumber}\n            clickHandler={clickHandler}\n            quizQuestions={quizQuestions}\n          />\n          <TakeQuizCount\n            questionNumber={questionNumber}\n            quizQuestions={quizQuestions}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default TakeQuiz;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/turgor/Pulpit/GetGood/src/components/NewQuiz.jsx\";\nimport React, { useState } from \"react\";\nimport \"../scss/_NewQuiz.scss\";\nimport NewQuizButtons from \"./NewQuizButtons\";\nimport NewQuizinput from \"./NewQuizInput\";\nimport NewQuizScrolbar from \"./NewQuizScrolbar\";\n\nfunction NewQuiz() {\n  const [elementData, setElementData] = useState({\n    title: \"\",\n    question: \"\",\n    correctAnswer: \"\",\n    answer1: \"\",\n    answer2: \"\",\n    answer3: \"\"\n  });\n  const [quizData, setQuizData] = useState([]);\n  const [questions, setQuestions] = useState([]); //   const API = \"http://localhost:3000\";\n  //   fetch(`${API}/db`)\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       console.log(data);\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n\n  const quizSubmit = () => {\n    // let singleQuestion = {\n    //   content: \"Content pytania\",\n    //   answers: [\n    //     {\n    //       content: questions[0].correctAnswer\n    //     }\n    //   ]\n    // }\n    // let res = questions.map(el => {\n    //   singleQuestion.answers.push({\n    //       content: elementData.,\n    //       correct: false\n    //     })\n    // });\n    setQuizData(prev => ({\n      name: \"Biologia - Anatomia\",\n      questions: [{\n        content: elementData.question,\n        answers: [{\n          content: elementData.correctAnswer,\n          correct: true\n        }, {\n          content: elementData.answer1,\n          correct: false\n        }, {\n          content: elementData.answer2,\n          correct: false\n        }, {\n          content: elementData.answer3,\n          correct: false\n        }]\n      }]\n    }));\n    fetch(`http://localhost:4000/quizs`, {\n      method: \"POST\",\n      body: JSON.stringify(quizData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  };\n\n  const changeHandler = ({\n    target: {\n      name,\n      value\n    }\n  }) => {\n    setElementData(prev => ({ ...prev,\n      [name]: value\n    }));\n    setQuestions(prev => [...prev, {\n      title: \"\",\n      question: \"\",\n      correctAnswer: \"\",\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\"\n    }]);\n  };\n\n  const newQuestionHandler = () => {\n    setQuizData(prev => [...prev, elementData]);\n    setElementData({\n      title: \"\",\n      question: \"\",\n      correctAnswer: \"\",\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\"\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newQuizContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NewQuizButtons, {\n    quizSubmit: quizSubmit,\n    newQuestionHandler: newQuestionHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewQuizinput, {\n    elementData: elementData,\n    changeHandler: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewQuizScrolbar, {\n    quizData: quizData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default NewQuiz;","map":{"version":3,"sources":["/home/turgor/Pulpit/GetGood/src/components/NewQuiz.jsx"],"names":["React","useState","NewQuizButtons","NewQuizinput","NewQuizScrolbar","NewQuiz","elementData","setElementData","title","question","correctAnswer","answer1","answer2","answer3","quizData","setQuizData","questions","setQuestions","quizSubmit","prev","name","content","answers","correct","fetch","method","body","JSON","stringify","headers","changeHandler","target","value","newQuestionHandler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"../scss/_NewQuiz.scss\";\nimport NewQuizButtons from \"./NewQuizButtons\";\nimport NewQuizinput from \"./NewQuizInput\";\nimport NewQuizScrolbar from \"./NewQuizScrolbar\";\n\nfunction NewQuiz() {\n  const [elementData, setElementData] = useState({\n    title: \"\",\n    question: \"\",\n    correctAnswer: \"\",\n    answer1: \"\",\n    answer2: \"\",\n    answer3: \"\",\n  });\n\n  const [quizData, setQuizData] = useState([]);\n  const [questions, setQuestions] = useState([]);\n\n  //   const API = \"http://localhost:3000\";\n\n  //   fetch(`${API}/db`)\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       console.log(data);\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n\n\n\n\n  const quizSubmit = () => {\n\n    // let singleQuestion = {\n    //   content: \"Content pytania\",\n    //   answers: [\n    //     {\n    //       content: questions[0].correctAnswer\n    //     }\n    //   ]\n    // }\n\n    // let res = questions.map(el => {\n    //   singleQuestion.answers.push({\n    //       content: elementData.,\n    //       correct: false\n    //     })\n    // });\n\n  \n   \n\n    setQuizData( (prev)=> ({\n      name: \"Biologia - Anatomia\",\n      questions: [ \n        {\n          content: elementData.question,\n          answers: [\n            {\n              content: elementData.correctAnswer,\n              correct: true,\n            },\n            {\n              content: elementData.answer1,\n              correct: false,\n            },\n            {\n              content: elementData.answer2,\n              correct: false,\n            },\n            {\n              content: elementData.answer3,\n              correct: false,\n            }\n          ],\n        },\n      ]\n    }))\n    fetch(`http://localhost:4000/quizs`, {\n      method: \"POST\",\n      body: JSON.stringify(quizData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    });\n  };\n\n  const changeHandler = ({ target: { name, value } }) => {\n    setElementData((prev) => ({ ...prev, [name]: value }));\n    setQuestions((prev) => [...prev, {\n      title: \"\",\n      question: \"\",\n      correctAnswer: \"\",\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\"\n    }])\n  };\n\n  const newQuestionHandler = () => {\n    setQuizData((prev) => [...prev, elementData]);\n    setElementData({\n      title: \"\",\n      question: \"\",\n      correctAnswer: \"\",\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\",\n    });\n  };\n  return (\n    <div className=\"newQuizContent\">\n      <NewQuizButtons  quizSubmit={quizSubmit} newQuestionHandler={newQuestionHandler} />\n      <NewQuizinput elementData={elementData} changeHandler={changeHandler} />\n      <NewQuizScrolbar  quizData={quizData} />\n    </div>\n  );\n}\n\nexport default NewQuiz;\n"]},"metadata":{},"sourceType":"module"}